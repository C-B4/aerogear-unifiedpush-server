create table if not exists documents (push_application_id uuid, database text, user_id timeuuid, snapshot timeuuid, document_id text, content text, content_type text, PRIMARY KEY ((push_application_id, database, user_id), snapshot)) WITH CLUSTERING ORDER BY (snapshot DESC);
create custom index if not exists idx_documents_id ON documents (document_id) USING 'org.apache.cassandra.index.sasi.SASIIndex' WITH OPTIONS = { 'mode': 'CONTAINS', 'analyzer_class': 'org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer', 'case_sensitive': 'false' };
create table if not exists databases (push_application_id uuid, snapshot timestamp, database text, PRIMARY KEY (push_application_id, snapshot)) WITH CLUSTERING ORDER BY (snapshot DESC);
create custom index if not exists idx_databases_database ON databases (database) USING 'org.apache.cassandra.index.sasi.SASIIndex' WITH OPTIONS = { 'mode': 'CONTAINS', 'analyzer_class': 'org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer', 'case_sensitive': 'false' };
create table if not exists users (push_application_id uuid, user_id timeuuid, alias text, type tinyint, month tinyint, day int, PRIMARY KEY ((push_application_id, user_id), alias)) WITH CLUSTERING ORDER BY (alias ASC);
create materialized view if not exists users_by_alias_application as select alias from users where push_application_id IS NOT NULL AND user_id IS NOT NULL AND alias IS NOT NULL PRIMARY KEY (alias, push_application_id, user_id) WITH CLUSTERING ORDER BY (user_id DESC);
create materialized view if not exists users_by_alias as select alias from users where push_application_id IS NOT NULL AND user_id IS NOT NULL AND alias IS NOT NULL PRIMARY KEY (alias, user_id, push_application_id) WITH CLUSTERING ORDER BY (user_id DESC);
create materialized view if not exists users_by_application as select push_application_id, month from users where push_application_id IS NOT NULL AND alias IS NOT NULL AND user_id IS NOT NULL and month IS NOT NULL PRIMARY KEY ((push_application_id, month), user_id, alias) WITH CLUSTERING ORDER BY (user_id DESC);
create table if not exists otpcodes (variant_id uuid, token_id text, code text, PRIMARY KEY ((variant_id, token_id), code)) WITH CLUSTERING ORDER BY (code DESC);